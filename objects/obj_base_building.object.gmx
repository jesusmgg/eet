<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

image_index = irandom_range(0, 3);
image_speed = 0;

tile_x = 0;
tile_y = 0;

is_block_center = false;
block_w = 2;
block_h = 2;
block_start_x = 0;
block_start_y = 0;
block_end_x = 0;
block_end_y = 0;

block_center = noone;

probability_grow = 50;
probability_new_block = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Try to generate new block

if (is_block_center)
{
    if (irandom(probability_new_block) == 1)
    {
        var new_x = 0;
        var new_y = 0;
        
        //Get random tile in around the block (and past the asphalt tile):
        var use_max_x = irandom_range(0, 1);
        var use_max_y = irandom_range(0, 1);
        
        if (use_max_x) {new_x = block_end_x + 2;}
        else {new_x = block_start_x - 2;}
        if (use_max_y) {new_y = block_end_y + 2;}
        else {new_y = block_start_y - 2;}
        
        generate_block(new_x, new_y, game_controller);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Try to grow

if (is_block_center)
{
    if (irandom(probability_grow) == 1)
    {
        var grow_x = irandom_range(block_start_x, block_end_x);
        var grow_y = irandom_range(block_start_y, block_end_y);

        var new_building = noone;
        var pos_x = grow_x*32;
        var pos_y = grow_y*32;
        
        var house_small = instance_position(pos_x, pos_y, obj_house_small);
        var house_big = instance_position(pos_x, pos_y, obj_house_big);
        var apartments = instance_position(pos_x, pos_y, obj_apartments);
        var building = instance_position(pos_x, pos_y, obj_building);
        
        if (house_small != noone)
        {
            with (house_small) {instance_destroy();}
            new_building = instance_create(grow_x*32, grow_y*32, obj_house_big);
        }
        else if (house_big != noone)
        {
            with (house_big) {instance_destroy();}
            new_building = instance_create(grow_x*32, grow_y*32, obj_apartments);
        }
        else if (apartments != noone)
        {
            with (apartments) {instance_destroy();}
            new_building = instance_create(grow_x*32, grow_y*32, obj_building);
        }
        else if (building != noone)
        {
        }
        else
        {
            new_building = instance_create(grow_x*32, grow_y*32, obj_house_small);
        }
        
        if (new_building != noone)
        {
            if (grow_x == tile_x &amp;&amp; grow_y == tile_y)
            {
                new_building.is_block_center = true;
            }
            else
            {
                new_building.is_block_center = false;
            }            
            
            new_building.block_w = self.block_w;
            new_building.block_h = self.block_h;
            
            new_building.block_start_x = self.block_start_x;
            new_building.block_start_y = self.block_start_y;
            new_building.block_end_x = self.block_end_x;
            new_building.block_end_y = self.block_end_y;
            
            new_building.tile_x = grow_x;
            new_building.tile_y = grow_y;
            
            new_building.block_center = self;
            new_building.game_controller = self.game_controller;
            
            ds_grid_set(
                game_controller.grid_occupation,
                grow_x, grow_y,
                game_controller.TILE_OCCUPIED
            );        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
