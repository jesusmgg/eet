<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constants

MAP_W = 128;
MAP_H = 64;

PADDING_X = 5;

//grid_occupation tile status:
TILE_FREE = 0;
TILE_OCCUPIED = 1;
TILE_RESERVED = 2;

TILE_POWERED_TRUE = 1;
TILE_POWERED_FALSE = 3;

TILE_VALUE_LOW = 3;
TILE_VALUE_HIGH = 1;

//Gameplay values:
NODE_LOW_RANGE = 4;
NODE_HIGH_RANGE = 2;
POWER_PLANT_DISLIKE_RANGE = 12;
SUBSTATION_DISLIKE_RANGE = 4;
NODE_HIGH_DISLIKE_RANGE = 2;

PLANT_COAL_COST = 10000.0;
PLANT_COAL_POLLUTION = 15;
PLANT_COAL_POWER_GENERATED = 5000;

PLANT_OIL_COST = 25000.0;
PLANT_OIL_POLLUTION = 10;
PLANT_OIL_POWER_GENERATED = 7500;

PLANT_NUCLEAR_COST = 100000.0;
PLANT_NUCLEAR_POLLUTION = 5;
PLANT_NUCLEAR_POWER_GENERATED = 15000;

PLANT_SOLAR_COST = 150000.0;
PLANT_SOLAR_POLLUTION = 1;
PLANT_SOLAR_POWER_GENERATED = 5000;

NODE_LOW_COST = 20.0;
NODE_HIGH_COST = 50.0;

SUBSTATION_COST = 1000.0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

game_controller = self;
selection_object = noone;

show_grid_powered = false;
show_grid_value = false;

grid_occupation = ds_grid_create(MAP_W, MAP_H);
ds_grid_clear(grid_occupation, game_controller.TILE_FREE);

grid_powered = ds_grid_create(MAP_W, MAP_H);
ds_grid_clear(grid_powered, game_controller.TILE_POWERED_FALSE);

grid_value = ds_grid_create(MAP_W, MAP_H);
ds_grid_clear(grid_value, game_controller.TILE_VALUE_HIGH);

stats_pollution = 0;
stats_money = 15000.0;
stats_power_generated = 0;
stats_power_consumed = 0;
stats_tax = 0;
stats_price = 0.04;

ui_text_info = "Welcome!";

randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate UI objects

var button_plant_coal = instance_create(63, 40, obj_button_plant_coal);
var button_plant_oil = instance_create(63, 110, obj_button_plant_oil);
var button_plant_nuclear = instance_create(63, 180, obj_button_plant_nuclear);
var button_plant_solar = instance_create(63, 250, obj_button_plant_solar);

var button_node_low = instance_create(63, 330, obj_button_node_low);
var button_node_high = instance_create(63, 400, obj_button_node_high);

var button_substation = instance_create(63, 480, obj_button_substation);

var button_power = instance_create(63, 552, obj_button_power);
var button_value = instance_create(63, 606, obj_button_value);

button_plant_coal.game_controller = self;
button_plant_oil.game_controller = self;
button_plant_nuclear.game_controller = self;
button_plant_solar.game_controller = self;

button_node_low.game_controller = self;
button_node_high.game_controller = self;

button_substation.game_controller = self;

button_power.game_controller = self;
button_value.game_controller = self;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Instantiate selection object

selection_object = instance_create(0, 0, obj_selection);
selection_object.game_controller = self;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate water (to pad game field for UI)

for (var i=0;i&lt;game_controller.PADDING_X;i++)
{
    for (var j=0;j&lt;game_controller.MAP_H;j++)
    {
        instance_create(i*32, j*32, obj_water);
        ds_grid_set(
            game_controller.grid_occupation,
            i, j,
            game_controller.TILE_OCCUPIED
        );
    }
}

var limit = game_controller.MAP_W - 1 - game_controller.PADDING_X;
for (var i=game_controller.MAP_W-1;i&gt;limit;i--)
{
    for (var j=0;j&lt;game_controller.MAP_H;j++)
    {
        instance_create(i*32, j*32, obj_water);
        ds_grid_set(
            game_controller.grid_occupation,
            i, j,
            game_controller.TILE_OCCUPIED
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate first block

var tile_x = irandom_range(24, 36);
var tile_y = irandom_range(16, 24);

generate_block(tile_x, tile_y, game_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>501</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_sprite</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_bg_power_buttons</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>501</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_sprite</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_bg_power_buttons</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>window_get_width() - 128</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>501</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_sprite</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_logo_small</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>window_get_width() - 64</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>640 - 74</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI Text

var text_x = window_get_width() - 124;

draw_set_colour(c_black);
draw_set_halign(fa_left);

draw_set_font(fnt_arial_12);
draw_text(text_x, 20, "Info:");
draw_set_font(fnt_arial_8);
draw_text(text_x, 40, ui_text_info);

draw_set_font(fnt_arial_12);
draw_text(text_x, 120, "Power:");
draw_set_font(fnt_arial_10);
draw_text(text_x, 140, "Gen.:");
draw_text(text_x + 35, 140, string(stats_power_generated) + "kWh");
draw_text(text_x, 160, "Use:");
draw_text(text_x + 35, 160, string(stats_power_consumed) + "kWh");
draw_text(text_x, 180, "Pollution:");
draw_text(text_x + 60, 180, + string(stats_pollution) + "%");

draw_set_font(fnt_arial_12);
draw_text(text_x, 220, "Finances:");
draw_set_font(fnt_arial_10);
draw_text(text_x, 240, "Money:");
draw_text(text_x + 45, 240, "$" + string(stats_money));
draw_text(text_x, 260, "Price:");
draw_text(text_x + 40, 260, string(stats_price) + " $/kWh");
draw_text(text_x, 280, "Tax:");
draw_text(text_x + 35, 280, string(stats_tax) + "%");

draw_set_font(fnt_arial_8);
draw_set_halign(fa_center);
draw_text(window_get_width()-64, 590, "Electric Energy Tycoon");

draw_set_halign(fa_left);
draw_set_font(fnt_arial_10);
draw_text(text_x, 620, "FPS: " + string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw overlays

if (game_controller.show_grid_powered)
{    
    for (var i=0; i&lt;game_controller.MAP_W; i++)
    {
        for (var j=0; j&lt;game_controller.MAP_H; j++)
        {
            var tile_status = ds_grid_get(game_controller.grid_powered, i, j);
            if (tile_status == game_controller.TILE_POWERED_TRUE)
            {
                draw_sprite(spr_selection_green, 0, i*32, j*32);
            }
            else if (tile_status == game_controller.TILE_POWERED_FALSE)
            {
                draw_sprite(spr_selection_red, 0, i*32, j*32);
            }
        }
    }
}

else if (game_controller.show_grid_value)
{    
    for (var i=0; i&lt;game_controller.MAP_W; i++)
    {
        for (var j=0; j&lt;game_controller.MAP_H; j++)
        {
            var tile_status = ds_grid_get(game_controller.grid_value, i, j);
            if (tile_status == game_controller.TILE_VALUE_HIGH)
            {
                draw_sprite(spr_selection_green, 0, i*32, j*32);
            }
            else if (tile_status == game_controller.TILE_VALUE_LOW)
            {
                draw_sprite(spr_selection_red, 0, i*32, j*32);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
